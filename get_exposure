#!/usr/bin/env python
from __future__ import print_function, division
import os, sys
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import argparse
from astropy import log
from os import path
from glob import glob
from subprocess import check_call
import shutil
from astropy.table import Table
import sys
from nicer.values import *
from datetime import datetime
from dateutil import parser as pr
import pylab
import itertools
from datetime import timedelta


desc = """
This plots the cumulative exposure by week for the ObsIDs in the current directory. 
"""

parser = argparse.ArgumentParser(description = desc)
args = parser.parse_args()

#Define a function for sorting dates by week
#Takes a list of tuples in [(date1, exposure1), (date2, exposure2)]
def toWeek(tuplist):
	sunday = datetime.strptime(tuplist[0], '%Y-%m-%d').strftime('%Y-%U-0')
    	return datetime.strptime(sunday, '%Y-%U-%w').strftime('%Y-%m-%d')

#Make a directory of the unordered files
files_unordered = {}
#Iterate through all obsIDs
for filename in os.listdir(os.getcwd()):
	if os.path.isfile(filename+"_pipe/cleanfilt.evt"):
		print(filename)
		#First get the clean exposure time from cleanfilt.evt
		cleanfilt = filename + "_pipe/cleanfilt.evt"
		cleanevttable = Table.read(cleanfilt, hdu=2)
		obstime = cleanevttable.meta['DATE-OBS']
		obstime_dt = pr.parse(obstime)
		cleanexposure = cleanevttable.meta['EXPOSURE']

		#Now get raw exposure time 
		rawufa = filename + "/xti/event_cl/ni"+filename+"_0mpu7_ufa.evt"
		ufatable = Table.read(rawufa, hdu=1)
		rawexposure = ufatable.meta['EXPOSURE']
		#Add values to the dictionary
		files_unordered[obstime_dt] = [filename, cleanexposure, rawexposure]

#Sort everything
dates = []
ordered_clean_exposure = []
ordered_raw_exposure = []
for key in sorted(files_unordered.iterkeys()):
	dates.append(key)
	ordered_clean_exposure.append(files_unordered[key][1])
	ordered_raw_exposure.append(files_unordered[key][2])
		
#We are only interested in the year day and month of the time (since we are grouping by week)		
date_ydm = []
for i in range(len(dates)):
	date_ydm.append(str(dates[i])[:10])

###Create Tuples###
tup_clean = []
for i in range(len(date_ydm)):
	tup_clean.append((date_ydm[i], ordered_clean_exposure[i]))

tup_raw = []
for i in range(len(date_ydm)):
	tup_raw.append((date_ydm[i], ordered_raw_exposure[i]))

###Group by Week###
grouped_clean_exposures = itertools.groupby(tup_clean, toWeek)
		
aggregate_exposures_clean = (
    	(week, sum(day_exposures for date, day_exposures in week_exposures))
    	for week, week_exposures in grouped_clean_exposures)

aggregate_exposures_clean = list(aggregate_exposures_clean)

grouped_raw_exposures = itertools.groupby(tup_raw, toWeek)

aggregate_exposures_raw = (
    	(week, sum(day_exposures for date, day_exposures in week_exposures))
    	for week, week_exposures in grouped_raw_exposures)

aggregate_exposures_raw = list(aggregate_exposures_raw)

###Get our lists to plot###
week_list = [ i[0] for i in aggregate_exposures_clean ]
values_clean = [ (i[1])/1000.0 for i in aggregate_exposures_clean ]
values_raw = [ (i[1])/1000.0 for i in aggregate_exposures_raw ]
dates_converted = [ pr.parse(i) for i in week_list ]
#We have to shift the dates over a bit for the multi-bar graph
dates_converted_raw = [ date + timedelta(days=1)  for date in dates_converted ] 

###Plot Everything###
plt.bar(dates_converted, values_clean, color='g', width=.5)
plt.bar(dates_converted_raw, values_raw, color='r', width=.5)
plt.xlabel("Date")
plt.ylabel("Exposure [ks]")
plt.title("Cumulative Exposure for 1821-24")
#plt.savefig("Exp_1821.png")
plt.show()
